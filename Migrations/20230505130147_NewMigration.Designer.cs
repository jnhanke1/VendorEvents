// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VendorEvents_1.Models;

#nullable disable

namespace VendorEvents_1.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20230505130147_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("VendorEvents_1.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventBooked")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventComments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventContactName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EventCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventPaid")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("EventPhone")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("EventID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("VendorEvents_1.Models.EventProduct", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("EventProduct");
                });

            modelBuilder.Entity("VendorEvents_1.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductQty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProductID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("VendorEvents_1.Models.EventProduct", b =>
                {
                    b.HasOne("VendorEvents_1.Models.Event", "Event")
                        .WithMany("EventProducts")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorEvents_1.Models.Product", "Product")
                        .WithMany("EventProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VendorEvents_1.Models.Event", b =>
                {
                    b.Navigation("EventProducts");
                });

            modelBuilder.Entity("VendorEvents_1.Models.Product", b =>
                {
                    b.Navigation("EventProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
