@page
@model ProductModel

@{
    ViewData["Title"] = "Products";
}

<div class="text-center">
    <h1 class="display-4">Products Offered</h1>
</div>
<!--a list of all products sold through the company-->

<form asp-page="./Products" method="get">
<div class="form actions no-color">
    <p>
        Find a Product by Name or Description:
        <input type="text" name="searchString" value="@Model.CurrentFilter" />
        <input type="submit" value="Search" class="btn btn=info" />
        <a asp-page="./Products">Back to full list</a>
    </p>
</div></form> 

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].ProductName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].ProductDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].ProductPrice)
            </th>    
            <th>
                @Html.DisplayNameFor(model => model.Product[0].ProductQty)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Product[0].ProductSource)
            </th> 
            <th>
                @Html.DisplayNameFor(model => model.Product[0].ProductImage)
            </th>           
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Product) {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.ProductName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ProductDescription)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ProductPrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ProductQty)
                    </td>
                    <td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ProductSource)

                    <td>
                        <img src="@item.ProductImage" alt="Check back soon for photo" margin="auto" width="100" height="100" >
                    </td>

                    @*  product represents an EventProducts record
                        Each product has a Product navigation property which is the actual product
                        The Product has a description. So you do product.Product.ProductDescription 
                    @foreach (var event in item.EventProducts!)
                    {
                        @myevent.Event.EventName <br />
                    }
                    @if (item.EventProducts.Count == 0)
                    {
                        @:This product will not be sold at any events. Contact us to order!
                    }      *@            
                    </td>
                    <td>
                    @*    <a asp-page="./Edit" asp-route-id="@item.ProductID">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.ProductID">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.ProductID">Delete</a> *@
                    </td>
                </tr>
        }
    </tbody>
</table>


@{
    //if we are on page 1, prevDisabled will be set to the "disabled" class. 
    //otherwise, it will be empty. So our previous button will be enabled or disabled on this logic.
    var prevDisabled = ""; 
    if (Model.PageNum <= 1)
    {
        prevDisabled = "disabled";
    }
}

<nav aria-label="Page navigation">
    <ul class="pagination">
        @*<!-- FIXME: These buttons will forget your current sort order! -->*@
        <li class="page-item @prevDisabled"><a class="page-link" asp-page="./Products" asp-route-PageNum="@(Model.PageNum - 1)">Previous</a></li>
        <li class="page-item"><a class="page-link" asp-page="./Products" asp-route-PageNum="@(Model.PageNum + 1)">Next</a></li>
    </ul>
</nav>